[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "assign01.html",
    "href": "assign01.html",
    "title": "Assignment 1",
    "section": "",
    "text": "“Generative Art is a process of algorithmically generating new ideas, forms, shapes, colors or patterns. First, you create rules that provide boundaries for the creation process. Then a computer follows those rules to produce new works on your behalf.” (https://aiartists.org/generative-art-design)\nExamples of generative art:\n https://aiartists.org/generative-art-design"
  },
  {
    "objectID": "assign01.html#fall-assignment",
    "href": "assign01.html#fall-assignment",
    "title": "Assignment 1",
    "section": "Fall Assignment",
    "text": "Fall Assignment\n\nlibrary(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n✓ tibble  3.1.6     ✓ dplyr   1.0.9\n✓ tidyr   1.2.0     ✓ stringr 1.4.0\n✓ readr   2.1.2     ✓ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\n# Define elements in plant art\n\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\n\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\n\nangle=22.5\n\ndepth=6\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %>% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\n\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n# Generating data\n\n# Note: may take a minute or two\n\nfor (action in actions)\n\n{\n\n  if (action==\"F\")\n\n  {\n\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n\n    points[1,\"x2\"]=x\n\n    points[1,\"y2\"]=y\n\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n\n               alfa=points[1, \"alfa\"],\n\n               depth=points[1,\"depth\"]) %>% rbind(points)->points\n\n  }\n\n  if (action %in% c(\"+\", \"-\")){\n\n    alfa=points[1, \"alfa\"]\n\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n\n  }\n\n  if(action==\"[\"){\n\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %>%\n\n      rbind(status) -> status\n\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n\n  }\n\n  if(action==\"]\"){\n\n    depth=points[1, \"depth\"]\n\n    points[-1,]->points\n\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n\n               alfa=status[1, \"alfa\"],\n\n               depth=depth-1) %>%\n\n      rbind(points) -> points\n\n    status[-1,]->status\n\n  }\n\n}\n\nggplot() +\n\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n\n               lineend = \"round\",\n\n               color=\"darkred\", # Set your own Fall color?\n\n               data=na.omit(points)) +\n\n  coord_fixed(ratio = 1) +\n\n  theme_void() # No grid nor axes"
  },
  {
    "objectID": "assign01.html#visualization-critique",
    "href": "assign01.html#visualization-critique",
    "title": "Assignment 1",
    "section": "Visualization Critique",
    "text": "Visualization Critique\nVisualization source:\nhttps://mlu-explain.github.io/roc-auc/\n\n\nThis visualization of the ROC curve puts two differing views together, allowing the user to move the bar to separate the blue clouds and the pink planes. The interactivity in the visualization allows the user to customize and play with the visual to understand the implications of traveling along the ROC Curve (i.e. adjusting the True Positive Rate and the False Positive Rate). This visualization makes the impact of changing TPR and FPR immediately obvious in a very visceral way. Without this visual, it would not be possible to easily think deeper about the numbers provided in the ROC curve. The two parts of the visual complement each other and work better together. This visualization is a good way to help a user set his or her optimal classification settings."
  },
  {
    "objectID": "fall.html",
    "href": "fall.html",
    "title": "Fall",
    "section": "",
    "text": "library(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n✓ tibble  3.1.6     ✓ dplyr   1.0.9\n✓ tidyr   1.2.0     ✓ stringr 1.4.0\n✓ readr   2.1.2     ✓ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\n# Define elements in plant art\n\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\n\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\n\nangle=22.5\n\ndepth=6\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %>% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\n\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n# Generating data\n\n# Note: may take a minute or two\n\nfor (action in actions)\n\n{\n\n  if (action==\"F\")\n\n  {\n\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n\n    points[1,\"x2\"]=x\n\n    points[1,\"y2\"]=y\n\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n\n               alfa=points[1, \"alfa\"],\n\n               depth=points[1,\"depth\"]) %>% rbind(points)->points\n\n  }\n\n  if (action %in% c(\"+\", \"-\")){\n\n    alfa=points[1, \"alfa\"]\n\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n\n  }\n\n  if(action==\"[\"){\n\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %>%\n\n      rbind(status) -> status\n\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n\n  }\n\n  if(action==\"]\"){\n\n    depth=points[1, \"depth\"]\n\n    points[-1,]->points\n\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n\n               alfa=status[1, \"alfa\"],\n\n               depth=depth-1) %>%\n\n      rbind(points) -> points\n\n    status[-1,]->status\n\n  }\n\n}\n\nggplot() +\n\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n\n               lineend = \"round\",\n\n               color=\"darkred\", # Set your own Fall color?\n\n               data=na.omit(points)) +\n\n  coord_fixed(ratio = 1) +\n\n  theme_void() # No grid nor axes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kiran Jaura",
    "section": "",
    "text": "-Kiran Jaura"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "My research areas include Harry Potter.\n\npar(family=\"sans\")\nplot(iris, pch=20, cex=.75, col=\"steelblue\")"
  }
]